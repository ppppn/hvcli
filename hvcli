#!/bin/env python3

from getpass import getpass, getuser
import winrm
import fire
import sys

connection_info = {
    "user": "",
    "password": "",
    "computer": "",
    "auth_methods": [],
}

def _print_result(response: winrm.Response):
    print(response.std_out.decode('utf-8'))
    if response.status_code != 0:
        sys.exit(response.std_err.decode('utf-8'))

def _run_ps(script: str) -> winrm.Response:
    response = None
    for auth_method in connection_info["auth_methods"]:
        session = winrm.Session(connection_info["computer"],
                    auth=(connection_info["user"], connection_info["password"]),
                    transport=auth_method)
        try:
            response = session.run_ps(script)
            break
        except Exception as e:
            print(e.with_traceback())
    if response is None:
        print("All specified authentication method(s) failed.")
        exit(1)
    return response

def _acquire_password():
    if not connection_info["password"]:
        try:
            connection_info["password"] = getpass("Authenticating as {user}: ".format(user=connection_info["user"]))
        except KeyboardInterrupt:
            print("Aborted.")
            exit(130)

class Cli(object):

    def __init__(self, user=None, password=None, computer="localhost", auth_methods=('ntlm', 'kerberos')):
        self.vm = Vm()
        if not user:
            connection_info["user"] = getuser()
        connection_info["password"] = password
        connection_info["computer"] = computer
        if type(auth_methods) != tuple:
            auth_methods = (auth_methods,)
        connection_info["auth_methods"] = auth_methods

class Vm(object):

    def __init__(self):
        f = open('ps1/vm.ps1')
        self.loaded_script = f.read()
        f.close()

    def list_vms(self):
        ps_script = self.loaded_script
        ps_script += 'hvcli-List-VMs'
        _acquire_password()
        ret = _run_ps(ps_script)
        _print_result(ret)

    def describe_vm(self, vm_name=None, vm_id=None):
        ps_script = self.loaded_script
        if vm_name:
            ps_script += 'hvcli-Describe-VM -vm_name "{vm_name}"'.format(vm_name=vm_name)
        elif vm_id:
            ps_script += 'hvcli-Describe-VM -vm_id "{vm_id}"'.format(vm_id=vm_id)
        else:
            raise fire.core.FireError("Neither vm_name nor vm_id specified")
        _acquire_password()
        ret = _run_ps(ps_script)
        _print_result(ret)

    def stop_vm(self, vm_name=None, vm_id=None, force=False, skip_os_shutdown=False, save=False):
        ps_script = self.loaded_script
        if vm_name:
            ps_script += 'hvcli-Stop-VM -vm_name "{vm_name}"'.format(vm_name=vm_name)
        elif vm_id:
            ps_script += 'hvcli-Stop-VM -vm_id "{vm_id}"'.format(vm_id=vm_id)
        else:
            raise fire.core.FireError("Neither vm_name nor vm_id specified")
        if sum(opt is not False for opt in [force, skip_os_shutdown, save]) > 1:
            raise fire.core.FireError("Too many options. You can specify only one of following: --force, --skip-os-shutdown, --save")

        if skip_os_shutdown:
            ps_script += ' -TurnOff'
        elif force:
            ps_script += ' -Force'
        elif save:
            ps_script += ' -Save'

        _acquire_password()
        ret = _run_ps(ps_script)
        _print_result(ret)

    def start_vm(self, vm_name=None, vm_id=None):
        ps_script = self.loaded_script
        if vm_name:
            ps_script += 'hvcli-Start-VM -vm_name "{vm_name}"'.format(vm_name=vm_name)
        elif vm_id:
            ps_script += 'hvcli-Start-VM -vm_id "{vm_id}"'.format(vm_id=vm_id)
        else:
            raise fire.core.FireError("Neither vm_name nor vm_id specified")
        _acquire_password()
        ret = _run_ps(ps_script)
        _print_result(ret)

    def restart_vm(self, vm_name=None, vm_id=None):
        ps_script = self.loaded_script
        if vm_name:
            ps_script += 'hvcli-Restart-VM -vm_name "{vm_name}"'.format(vm_name=vm_name)
        elif vm_id:
            ps_script += 'hvcli-Restart-VM -vm_id "{vm_id}"'.format(vm_id=vm_id)
        else:
            raise fire.core.FireError("Neither vm_name nor vm_id specified")
        while True:
            try:
                input_txt = input('This command perform a "hard" reset. Proceed anyway?(y/N): ')
            except KeyboardInterrupt:
                print("Aborted.")
                exit(130)
            if input_txt in ("y", "Y"):
                break
            elif input_txt in ("n", "N", ""):
                print("Aborted.")
                exit(0)
            else:
                print("Please enter either 'y' or 'n'")
        _acquire_password()
        ret = _run_ps(ps_script)
        _print_result(ret)

    def reboot_vm(self, vm_name=None, vm_id=None):
        ps_script = self.loaded_script
        if vm_name:
            ps_script += 'hvcli-Reboot-VM -vm_name "{vm_name}"'.format(vm_name=vm_name)
        elif vm_id:
            ps_script += 'hvcli-Reboot-VM -vm_id "{vm_id}"'.format(vm_id=vm_id)
        else:
            raise fire.core.FireError("Neither vm_name nor vm_id specified")
        _acquire_password()
        ret = _run_ps(ps_script)
        _print_result(ret)

    def get_vm_status(self, vm_name=None, vm_id=None):
        ps_script = self.loaded_script
        if vm_name:
            ps_script += 'hvcli-Get-VM-Status -vm_name "{vm_name}"'.format(vm_name=vm_name)
        elif vm_id:
            ps_script += 'hvcli-Get-VM-Status -vm_id "{vm_id}"'.format(vm_id=vm_id)
        else:
            raise fire.core.FireError("Neither vm_name nor vm_id specified")
        _acquire_password()
        ret = _run_ps(ps_script)
        _print_result(ret)

    def get_vm_memory(self, vm_name=None, vm_id=None):
        ps_script = self.loaded_script
        if vm_name:
            ps_script += 'hvcli-Get-VM-Memory -vm_name "{vm_name}"'.format(vm_name=vm_name)
        elif vm_id:
            ps_script += 'hvcli-Get-VM-Memory -vm_id "{vm_id}"'.format(vm_id=vm_id)
        else:
            raise fire.core.FireError("Neither vm_name nor vm_id specified")
        _acquire_password()
        ret = _run_ps(ps_script)
        _print_result(ret)

    def set_vm_memory(self, vm_name=None, vm_id=None,
                      startup_bytes:int=None, minimum_bytes:int=None, maximum_bytes:int=None,
                      enable_dynamic_memory:bool=None, disable_dynamic_memory:bool=None,
                      buffer:int=None, priority:int=None):
        ps_script = self.loaded_script
        if vm_name:
            ps_script += 'hvcli-Set-VM-Memory -vm_name "{vm_name}"'.format(vm_name=vm_name)
        elif vm_id:
            ps_script += 'hvcli-Set-VM-Memory -vm_id "{vm_id}"'.format(vm_id=vm_id)
        else:
            raise fire.core.FireError("Neither vm_name nor vm_id specified")

        if sum(opt is not None for opt in [startup_bytes, minimum_bytes, maximum_bytes,
                                           enable_dynamic_memory, disable_dynamic_memory, buffer, priority]) < 1:
            sys.exit("No option is set.")

        if enable_dynamic_memory and disable_dynamic_memory:
            sys.exit("Either enable_dynamic_memory or disable_dynamic_memory can be set.")

        if startup_bytes:
            ps_script += ' -StartupBytes {}'.format(startup_bytes)
        if minimum_bytes:
            ps_script += ' -MinimumBytes {}'.format(minimum_bytes)
        if maximum_bytes:
            ps_script += ' -MaximumBytes {}'.format(maximum_bytes)
        if enable_dynamic_memory:
            ps_script += ' -EnableDynamicMemory $True'
        if disable_dynamic_memory:
            ps_script += ' -EnableDynamicMemory $False'
        if buffer:
            ps_script += ' -Buffer {}'.format(buffer)
        if priority:
            ps_script += ' -Priority {}'.format(priority)

        _acquire_password()
        ret = _run_ps(ps_script)
        _print_result(ret)


if __name__ == "__main__":
    fire.Fire(Cli)